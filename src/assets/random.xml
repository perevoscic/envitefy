brew install libpq && brew link --force libpq
# If you created the Initial database name as 'snapmydate', connect to it; otherwise connect to 'postgres'.
psql "host=<RDS_ENDPOINT> port=5432 user=appuser dbname=snapmydate sslmode=require"
# or (if 'snapmydate' DB wasn't auto-created):
psql "host=<RDS_ENDPOINT> port=5432 user=appuser dbname=postgres sslmode=require" \
  -c "CREATE DATABASE snapmydate;"

  3) Initialize schema

  create extension if not exists "uuid-ossp";

create table if not exists users (
  id uuid primary key default uuid_generate_v4(),
  email text not null unique,
  first_name text,
  last_name text,
  password_hash text not null,
  created_at timestamptz not null default now()
);
create index if not exists ix_users_email on users (lower(email));

create table if not exists oauth_tokens (
  id uuid primary key default uuid_generate_v4(),
  email text not null,
  user_id uuid,
  provider text not null check (provider in ('google','microsoft')),
  refresh_token text not null,
  updated_at timestamptz not null default now(),
  unique (email, provider)
);
create unique index if not exists ux_oauth_tokens_user_provider
  on oauth_tokens(user_id, provider) where user_id is not null;
create index if not exists ix_oauth_tokens_email on oauth_tokens(email);

create or replace function set_updated_at() returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists trg_oauth_tokens_updated_at on oauth_tokens;
create trigger trg_oauth_tokens_updated_at
before update on oauth_tokens
for each row execute procedure set_updated_at();

Quick checks in psql:
List DBs: \l
Use DB: \c snapmydate
List tables: \dt
4) Wire the app
Set this in your service (App Runner env/Secrets Manager):
DATABASE_URL=postgresql://appuser:<password>@<RDS_ENDPOINT>:5432/snapmydate?sslmode=require
Apply to Untitled-1
require
Common gotchas
Connection refused/timeouts: add your IP to the DB security group (port 5432).
FATAL no pg_hba entry: same fix (SG ingress).
Prefer private access later: remove Public access, add App Runner VPC connector, allow its SG to the DB SG.
You already have the instance; I showed how to connect, create the DB (if needed), apply schema, and set DATABASE_URL.